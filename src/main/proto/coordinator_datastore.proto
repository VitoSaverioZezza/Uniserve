syntax = "proto3";

option java_multiple_files = true;
option java_package = "edu.stanford.futuredata.uniserve";
option java_outer_classname = "CoordinatorDataStoreProto";

package coordinatordatastore;

// Communication from coordinator to the datastores.
service CoordinatorDataStore {
    // Load a replica shard on a datastore.
    rpc loadShardReplica (LoadShardReplicaMessage) returns (LoadShardReplicaResponse) {}
    // Ask a datastore for shard usage information.
    rpc shardUsage (ShardUsageMessage) returns (ShardUsageResponse) {}
    // Remove a shard from a datastore.
    rpc removeShard (RemoveShardMessage) returns (RemoveShardResponse) {}
    // Notify the primary a replica is being removed.
    rpc NotifyReplicaRemoved (NotifyReplicaRemovedMessage) returns (NotifyReplicaRemovedResponse) {}
    rpc ExecuteReshuffleRemove (ExecuteReshuffleMessage) returns (ExecuteReshuffleResponse) {}
    // Ping a datastore to see if it's alive.
    rpc CoordinatorPing (CoordinatorPingMessage) returns (CoordinatorPingResponse) {}
    // Execute a shard reshuffle, adding or remove shards to servers.
    rpc ExecuteReshuffleAdd (ExecuteReshuffleMessage) returns (ExecuteReshuffleResponse) {}
    rpc ShutdownDS(ShutdownDSMessage) returns (ShutdownDSResponse){}
}

message ShutdownDSMessage{}
message ShutdownDSResponse{}

message LoadShardReplicaMessage {
    int32 shard = 1;
    bool isReplacementPrimary = 2;
}

message LoadShardReplicaResponse {
    int32 returnCode = 1;
}

message CoordinatorPingMessage {}

message CoordinatorPingResponse {}

message RemoveShardMessage {
    int32 shard = 1;
}

message RemoveShardResponse {}

message ShardUsageMessage {}

message ShardUsageResponse {
    int32 dsID = 1;
    map<int32, int32> shardQPS = 2;
    map<int32, int32> shardMemoryUsage = 3;
    double serverCPUUsage = 4;
}

message NotifyReplicaRemovedMessage {
    int32 shard = 1;
    int32 dsID = 2;
}

message NotifyReplicaRemovedResponse {}

message ExecuteReshuffleMessage {
    bytes newConsistentHash = 1;
    repeated int32 shardList = 2;
    int32 dsID = 3;
}

message ExecuteReshuffleResponse {}
